[{"/Users/amaan/amaan/answer-frontend/src/reportWebVitals.js":"1","/Users/amaan/amaan/answer-frontend/src/components/DataTableFilters.js":"2","/Users/amaan/amaan/answer-frontend/src/index.js":"3","/Users/amaan/amaan/answer-frontend/src/components/NavigationBar.js":"4","/Users/amaan/amaan/answer-frontend/src/services/requests.js":"5","/Users/amaan/amaan/answer-frontend/src/components/PublicHomePage.js":"6","/Users/amaan/amaan/answer-frontend/src/auth/protected-route.js":"7","/Users/amaan/amaan/answer-frontend/src/App.js":"8","/Users/amaan/amaan/answer-frontend/src/components/DataTableContainer.js":"9","/Users/amaan/amaan/answer-frontend/src/components/DataTable.js":"10","/Users/amaan/amaan/answer-frontend/src/components/Dashboard.js":"11","/Users/amaan/amaan/answer-frontend/src/components/MarketCapLowFIlter.js":"12"},{"size":362,"mtime":1692641256812,"results":"13","hashOfConfig":"14"},{"size":38287,"mtime":1693392076333,"results":"15","hashOfConfig":"14"},{"size":1016,"mtime":1692641256812,"results":"16","hashOfConfig":"14"},{"size":2077,"mtime":1692641256811,"results":"17","hashOfConfig":"14"},{"size":2872,"mtime":1693391010084,"results":"18","hashOfConfig":"14"},{"size":2645,"mtime":1692641256811,"results":"19","hashOfConfig":"14"},{"size":483,"mtime":1692641256811,"results":"20","hashOfConfig":"14"},{"size":1427,"mtime":1693914748637,"results":"21","hashOfConfig":"14"},{"size":39819,"mtime":1693916715859,"results":"22","hashOfConfig":"14"},{"size":17613,"mtime":1693391010082,"results":"23","hashOfConfig":"14"},{"size":13715,"mtime":1694103440394,"results":"24","hashOfConfig":"14"},{"size":845,"mtime":1693980340839,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1icf6r9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/amaan/amaan/answer-frontend/src/reportWebVitals.js",[],["56","57"],"/Users/amaan/amaan/answer-frontend/src/components/DataTableFilters.js",["58","59","60","61","62","63","64"],"/Users/amaan/amaan/answer-frontend/src/index.js",[],["65","66"],"/Users/amaan/amaan/answer-frontend/src/components/NavigationBar.js",["67","68"],"import React from 'react'\nimport { AppBar, Toolbar, Button, Avatar, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { useAuth0 } from '@auth0/auth0-react'\nimport { Link, useLocation } from 'react-router-dom'\nimport c3Logo from '../assets/images/c3Logo.png'\n// import logo from './images/1_a.png'\n\nconst NavigationBar = (props) => {\n  const styles = useStyles()\n  const { isAuthenticated, logout, user, loading } = useAuth0() || {}\n  const currentLocation = useLocation().pathname\n  return (\n    <div>\n      <AppBar position='static' className={styles.appBar} elevation={1}>\n        <Toolbar className={styles.toolbar}>\n          <Link to={{ pathname: '/' }}>\n            <img className={styles.logo} src={c3Logo} />\n          </Link>\n          {currentLocation !== '/' && \n            <Typography component='div' variant='h4' className={styles.currentNavigationLabel}>\n              The Answer\n            </Typography>}\n          <div className={styles.padding}></div>\n          <Button\n            classes={{\n              label: styles.logoutLabel\n            }}\n            disabled={!isAuthenticated}\n            onClick={() => logout()}\n            >\n            Logout\n          </Button>\n          {isAuthenticated && !loading && <Avatar alt='Current User' src={user.picture} />}\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n\nexport default NavigationBar\n\nconst useStyles = makeStyles(theme => {\n  return {\n    toolbar: {\n      display: 'flex'\n    },\n    padding: {\n      flexGrow: 1\n    },\n    logoutLabel: {\n      color: theme.palette.text.secondary,\n      marginRight: theme.spacing(3)\n    },\n    appBar: {\n      backgroundColor: theme.palette.background.paper,\n      minHeight: '50px',\n      padding: '15px',\n      zIndex: theme.zIndex.drawer + 1,\n      position: 'fixed'\n    },\n    logo: {\n      width: 'auto',\n      height: '50px',\n      marginRight: theme.spacing(3)\n    },\n    currentNavigationLabel: {\n      color: theme.palette.text.primary\n    }\n  }\n})\n","/Users/amaan/amaan/answer-frontend/src/services/requests.js",[],"/Users/amaan/amaan/answer-frontend/src/components/PublicHomePage.js",[],["69","70"],"/Users/amaan/amaan/answer-frontend/src/auth/protected-route.js",[],["71","72"],"/Users/amaan/amaan/answer-frontend/src/App.js",[],"/Users/amaan/amaan/answer-frontend/src/components/DataTableContainer.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport {\n  Divider,\n  Drawer,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  Paper,\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport KeyboardArrowLeftIcon from \"@material-ui/icons/KeyboardArrowLeft\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport * as _ from \"lodash\";\nimport moment from \"moment\";\nimport { useEffect, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport {\n  addSavedFilter,\n  deleteSavedFilter,\n  getData,\n  getSavedFilters,\n} from \"../services/requests\";\nimport DataTable from \"./DataTable\";\nimport DataTableFilters from \"./DataTableFilters\";\n\nconst colMap = {\n  CLASS_END_DATE_DAY_AFTER: {\n    name: \"classenddatedayafter\",\n    displayName: \"Class End Date Day After\",\n  },\n  FREE_FLOAT: { name: \"freefloat\", displayName: \"Free Float\" },\n  PRIOR_QUARTER_DATE: {\n    name: \"priorquarterdate\",\n    displayName: \"Prior Quarter Date\",\n  },\n  TOTAL_NON_CASH_AMOUNT: {\n    name: \"totalnoncashamount\",\n    displayName: \"Total Non Cash Amount\",\n  },\n  SIC_CODE: { name: \"siccode\", displayName: \"SIC Code\" },\n  FEDERAL_CASE_NUMBER: {\n    name: \"federalcasenumber\",\n    displayName: \"Federal Case Number\",\n  },\n  FEDERAL_JUDGE: { name: \"federaljudge\", displayName: \"Federal Judge\" },\n  TOTAL_CASH: { name: \"totalcash\", displayName: \"Total Cash on Balance Sheet\" },\n  IPO: { name: \"ipo_yn\", displayName: \"IPO\" },\n  GAAP: { name: \"gaap_yn\", displayName: \"GAAP\" },\n  \"10B_5\": { name: \"10b_5_yn\", displayName: \"10B 5\" },\n  INSTITUTIONAL_OWNERSHIP_PERCENT_PRIOR_QTR: {\n    name: \"institutionalownershippriorquarter\",\n    displayName: \"Institutional Ownership Prior Quarter\",\n  },\n  CASH_SHARE: { name: \"cashshare\", displayName: \"Cash Share\" },\n  FREE_FLOAT_PCT: { name: \"floatpct\", displayName: \"Free Float (%)\" },\n  TICKER: { name: \"ticker\", displayName: \"Ticker\" },\n  BANKRUPTCY_CASE: { name: \"bankruptcycaseyn\", displayName: \"Bankruptcy Case\" },\n  OP: { name: \"po_yn\", displayName: \"PO\" },\n  FEDERAL_COURT: { name: \"federalcourt\", displayName: \"Federal Court\" },\n  MARKET_CAP_LOW: { name: \"marketcaplow\", displayName: \"Market Cap Low\" },\n  FINAL_SETTELMENT_DATE: {\n    name: \"finalsettlementdate\",\n    displayName: \"Final Settlement Date\",\n  },\n  CASE_ID: { name: \"caseid\", displayName: \"Case ID\" },\n  LADDERING: { name: \"ladderingyn\", displayName: \"Laddering\" },\n  SHORT: { name: \"shortpct\", displayName: \"Short (%)\" },\n  IT: { name: \"it_yn\", displayName: \"IT\" },\n  RESTATED_FINANCIALS: {\n    name: \"restatedfinancialsyn\",\n    displayName: \"Restated Financials\",\n  },\n  SEC_ACTION: { name: \"secactionyn\", displayName: \"SEC Action\" },\n  WHY_SUED: { name: \"whysuedcategory\", displayName: \"Why Sued\" },\n  INSIDER_OWNERSHIP: {\n    name: \"insiderownership\",\n    displayName: \"Insider Ownership\",\n  },\n  CASE_STATUS: { name: \"casestatus\", displayName: \"Case Status\" },\n  WHY_SUED_ALLEGATIONS: {\n    name: \"whysuedallegations\",\n    displayName: \"Why Sued Allegations\",\n  },\n  CURRENT_RATIO: { name: \"currentratio\", displayName: \"Current Ratio\" },\n  CASE_NAME: { name: \"casename\", displayName: \"Case Name\" },\n  FEDERAL_FILING_DATE: {\n    name: \"federalfilingdate\",\n    displayName: \"Federal Filing Date\",\n  },\n  CLASS_START_DATE: { name: \"classstartdate\", displayName: \"Class Start Date\" },\n  CASH_SETTLEMENT_AMOUND: {\n    name: \"cashsettlementamount\",\n    displayName: \"Cash Settlement Amount\",\n  },\n  CASH_SETTLEMENT_AMOUND: {\n    name: \"tentativesettlementamount\",\n    displayName: \"Tentative Amount\",\n  },\n  TRANSACTIONAL: { name: \"transactionalyn\", displayName: \"Transactional\" },\n  CLASS_END_DATE: { name: \"classenddate\", displayName: \"Class End Date\" },\n  COMPANY_NAME: { name: \"companyname\", displayName: \"Company Name\" },\n  MARKET_CAP_HIGH: { name: \"marketcaphigh\", displayName: \"Market Cap High\" },\n  MARKET_CAP_DROP: { name: \"marketcapdrop\", displayName: \"Drop\" },\n  TOTAL_SETTLEMENT_AMOUNT: {\n    name: \"totalsettlementamount\",\n    displayName: \"Total Settlement Amount ($)\",\n  },\n  INSTITUTIONAL_OWNERSHIP: {\n    name: \"institutionalownership\",\n    displayName: \"Institutional Ownership\",\n  },\n  INSTITUTIONAL_OWNERSHIP_PCT: {\n    name: \"institutionalownershippct\",\n    displayName: \"Institutional Ownership (%)\",\n  },\n  SEC_11: { name: \"sec_11_yn\", displayName: \"SEC 11\" },\n  MARKET_CAP: { name: \"market_cap\", displayName: \"Market Cap\" },\n  PRIOR_QUARTER_REVENUE: {\n    name: \"priorquarterrevenue\",\n    displayName: \"Prior Quarter Revenue\",\n  },\n  PRIOR_YEAR_REVENUE: {\n    name: \"prioryearrevenue\",\n    displayName: \"Prior Year Revenue\",\n  },\n\n  STATE_FILING_DATE: {\n    name: \"statefilingdate\",\n    displayName: \"State Filing Date\",\n  },\n  FREE_FLOAT_MARKET_CAP: {\n    name: \"freefloatmarketcap\",\n    displayName: \"Free Float Market Cap\",\n  },\n  INSIDER_OWNERSHIP_PERCENT_FILING_DATE: {\n    name: \"insiderownershippercentfilingdate\",\n    displayName: \"Insider Ownership At Filing Date (%)\",\n  },\n  INSTITUTIONAL_OWNERSHIP_PERCENT_QTR_END: {\n    name: \"institutionalownershipqtrend\",\n    displayName: \"Institutional Ownership At Qtr End (%)\",\n  },\n  TOTAL_AMOUNT: { name: \"totalamount\", displayName: \"Total Amount ($)\" },\n  COURT_STATURE: { name: \"courtstature\", displayName: \"Court Stature\" },\n  FEDERAL_JUDGE: { name: \"federaljudge\", displayName: \"Federal Judge\" },\n  SUB_CATEGORY: { name: \"sub-category\", displayName: \"Sub Category\" },\n  CASH_AMOUNT: { name: \"cashamount\", displayName: \"Total Settlement Amount\" },\n};\n\nconst favoriteCols = [\n  \"federalfilingdate\",\n  \"casename\",\n  \"ticker\",\n  \"siccode\",\n  \"whysuedcategory\",\n  \"whysuedallegations\",\n  \"casestatus\",\n  \"marketcaphigh\",\n  \"marketcaplow\",\n  \"marketcapdrop\",\n  \"cashamount\",\n  \"floatpct\",\n  \"freefloatmarketcap\",\n  \"priorquarterrevenue\",\n  \"prioryearrevenue\",\n  \"short\",\n  \"insiderownershippercentfilingdate\",\n  \"institutionalownershipqtrend\",\n  \"totalamount\",\n  \"caseid\",\n  \"courtstature\",\n  \"federalcourt\",\n  \"federaljudge\",\n  \"po_yn\",\n  \"ipo_yn\",\n  \"ladderingyn\",\n  \"transactionalyn\",\n  \"it_yn\",\n  \"gaap_yn\",\n  \"restatedfinancialsyn\",\n  \"10b_5_yn\",\n  \"sec_11_yn\",\n  \"secactionyn\",\n  \"classenddatedayafter\",\n  \"freefloat\",\n  \"priorquarterdate\",\n  \"totalnoncashamount\",\n  \"federalcasenumber\",\n  \"totalcash\",\n  \"institutionalownershippriorquarter\",\n  \"cashshare\",\n  \"bankruptcycaseyn\",\n  \"finalsettlementdate\",\n  \"shortpct\",\n  \"insiderownership\",\n  \"currentratio\",\n  \"classstartdate\",\n  \"cashsettlementamount\",\n  \"tentativesettlementamount\",\n  \"classenddate\",\n  \"companyname\",\n  \"totalsettlementamount\",\n  \"institutionalownership\",\n  \"institutionalownershippct\",\n  \"marketcap\",\n  \"allegations\",\n];\n\nconst DataTableComponent = (props) => {\n  const styles = useStyles();\n\n  const { getAccessTokenSilently } = useAuth0();\n  const [rawTableData, setRawTableData] = useState(null);\n  const [tableData, setTableData] = useState(null);\n  const [currentTableSort, setCurrentTableSort] = useState(null);\n  const [tableSlice, setTableSlice] = useState(null);\n  const [tableConfig, setTableConfig] = useState(null);\n  const [tableMeta, setTableMeta] = useState(null);\n  const [filters, setFilters] = useState([]);\n  const [drawerToggle, setDrawerToggle] = useState(false);\n  const [savedFilters, setSavedFilters] = useState([]);\n\n  useEffect(async () => {\n    const token = await getAccessTokenSilently();\n    const data = await getData(token);\n    getSavedFiltersHelper(token);\n    if (data?.rows && data?.meta) {\n      convertRowProps(data);\n      const tableData = createTableData(data.rows);\n      const tableConfig = createTableConfig(data.rows, data.meta);\n      setRawTableData(tableData);\n      setTableData(tableData);\n      setTableConfig(tableConfig);\n      setTableMeta(data.meta);\n    }\n  }, []);\n\n  useEffect(() => {\n    processFilters();\n  }, [JSON.stringify(filters)]);\n\n  const checkForCustomColumnProps = (dataProperty) => {\n    const config = {};\n    const propLower = dataProperty.toLowerCase();\n    for (const value of Object.values(colMap)) {\n      if (value.name === propLower) config.displayName = value.displayName;\n    }\n    if (\n      [\n        \"casename\",\n        \"insiderownershippercentfilingdate\",\n        \"institutionalownershipqtrend\",\n        \"institutionalownershippriorquarter\",\n        \"totalsettlementamount\",\n        \"priorquarterrevenue\",\n        \"prioryearrevenue\",\n        \"tentativesettlementamount\",\n      ].includes(propLower)\n    ) {\n      config.width = 300;\n    }\n    if (\n      [\n        \"insiderownershippercentfilingdate\",\n        \"institutionalownershipqtrend\",\n        \"floatpct\",\n        \"short\",\n        \"shortpct\",\n        \"insiderownership\",\n        \"institutionalownership\",\n        \"institutionalownershippct\",\n      ].includes(propLower)\n    ) {\n      config.dataType = \"percent\";\n    }\n    if (\n      [\"ticker\", \"whysuedcategory\", \"casestatus\", \"courtstature\"].includes(\n        propLower\n      )\n    ) {\n      config.alignmentRow = \"center\";\n    }\n    if ([\"currentratio\"].includes(propLower)) {\n      config.dataType = \"number\";\n    }\n    return config;\n  };\n\n  const convertRowProps = (data) => {\n    const boolProps = data.meta.filter((m) => m.type.toLowerCase() === \"tiny\");\n    if (boolProps.length) {\n      for (let row of data.rows) {\n        for (let boolProp of boolProps) {\n          row[boolProp.name] = row[boolProp.name] === 0 ? \"No\" : \"Yes\";\n        }\n      }\n    }\n  };\n\n  const getColumnConfig = (type) => {\n    const config = { dataType: \"string\" };\n    switch (type.toLowerCase()) {\n      case \"var_string\":\n      case \"blob\":\n        config.dataType = \"string\";\n        break;\n      case \"newdecimal\":\n        config.dataType = \"currency\";\n        break;\n      case \"tiny\":\n        config.dataType = \"string\";\n        config.alignmentRow = \"center\";\n        break;\n      case \"long\":\n      case \"float\":\n      case \"double\":\n        config.dataType = \"number\";\n        break;\n      case \"date\":\n        config.dataType = \"date\";\n        config.alignmentRow = \"center\";\n    }\n    return config;\n  };\n\n  const getColumnFromMeta = (meta) => {\n    const config = getColumnConfig(meta.type);\n    const customConfig = checkForCustomColumnProps(meta.name);\n    const hidden = !favoriteCols.find((col) => col === meta.name.toLowerCase());\n    let column = {\n      id: uuidv4(),\n      rawType: meta.type,\n      displayName: meta.name,\n      dataProperty: meta.name,\n      sort: true,\n      sortDirection: null,\n      dataType: null,\n      alignmentHeader: \"center\",\n      alignmentRow: null,\n      width: null,\n      flex: null,\n      options: [],\n      hidden: hidden,\n      headerBorderWidth: 1,\n      cellBorderWidth: 1,\n    };\n    column = Object.assign({}, column, config, customConfig);\n    return column;\n  };\n\n  const createTableConfig = (rows, meta) => {\n    const tableConfig = {\n      numRows: rows.length,\n      rowsPerPage: 50,\n      showHeader: true,\n      actions: [],\n      columns: [],\n      editable: {},\n      // headerCellStyles: [{ dataProperty: ['*'], style: { 'fontSize': '1.6rem', 'fontWeight': 'bold', 'color': 'rgb(109 107 107)' }}],\n      headerCellStyles: [\n        {\n          dataProperty: [\"*\"],\n          style: { fontSize: \"1rem\", fontWeight: \"bold\", color: \"white\" , minWidth : 100 , maxWidth:100 },\n        },\n      ],\n      headerRowStyles: {},\n    };\n    for (let fav of favoriteCols) {\n      const columnMeta = meta.find((m) => m.name.toLowerCase() === fav);\n      if (columnMeta) {\n        tableConfig.columns.push(getColumnFromMeta(columnMeta));\n      }\n    }\n    for (let columnMeta of meta) {\n      if (!favoriteCols.includes(columnMeta.name.toLowerCase())) {\n        tableConfig.columns.push(getColumnFromMeta(columnMeta));\n      }\n    }\n    return tableConfig;\n  };\n\n  const createTableData = (data) => {\n    const tableData = [];\n    for (let rowData of data) {\n      tableData.push({\n        data: rowData,\n        actions: [],\n        options: null,\n        rowStyles: {},\n        // cellStyles: [{ dataProperty: ['*'], style: { 'fontSize': '1.6rem', 'borderRight': '1px solid #F1F1F1', 'borderBottom': '1px solid #F1F1F1' }}],\n        cellStyles: [\n          {\n            dataProperty: [\"*\"],\n            style: {\n              fontSize: \"1rem\",\n              borderRight: \"1px solid #696969\",\n              borderBottom: \"1px solid #696969\",\n              // minWidth : 129 ,\n              // maxWidth:129,\n              wordWrap: \"break-all\",\n              height: 70,\n              display:'flex',\n              flexDirection : 'row',\n              justifyContent:'center'\n            },\n          },\n        ],\n        id: uuidv4(),\n      });\n    }\n    return tableData;\n  };\n\n  const tableSliceHandler = (tableEvent) => {\n    const numTableRows = tableData.length;\n    var lowerRowIdx = Math.max(tableEvent.data.lowerRowIdx, 0);\n    // const upperRowIdx = Math.min(numTableRows, tableEvent.data.upperRowIdx)\n    const upperRowIdx = Math.min(\n      numTableRows,\n      tableEvent.data.lowerRowIdx + tableConfig.rowsPerPage\n    );\n    if (lowerRowIdx > upperRowIdx) {\n      lowerRowIdx = Math.max(upperRowIdx - tableEvent.size, 0);\n    }\n    const tableRows = tableData.slice(lowerRowIdx, upperRowIdx);\n    const slice = {\n      tableRows,\n      lowerRowIdx: lowerRowIdx,\n      upperRowIdx: upperRowIdx,\n    };\n    setTableSlice(slice);\n  };\n\n  const tableSortAscHelper = (newTableData, column) => {\n    switch (column.dataType) {\n      case \"currency\":\n      case \"percent\":\n      case \"number\":\n        newTableData.sort((a, b) => {\n          let valA = a.data[column.dataProperty];\n          let valB = b.data[column.dataProperty];\n          if (valA == undefined) {\n            return 1;\n          }\n          if (valB == undefined) {\n            return -1;\n          }\n          return valA - valB;\n        });\n        break;\n      case \"string\":\n        newTableData.sort((a, b) => {\n          let valA = a.data[column.dataProperty];\n          let valB = b.data[column.dataProperty];\n          if (valA == undefined || valA == \"\") {\n            return 1;\n          }\n          if (valB == undefined || valB == \"\") {\n            return -1;\n          }\n          return valA.localeCompare(valB);\n        });\n        break;\n      case \"date\":\n        newTableData.sort((a, b) => {\n          let valA = a.data[column.dataProperty];\n          let valB = b.data[column.dataProperty];\n          let mntA = moment(valA);\n          let mntB = moment(valB);\n          if (mntA.inspect().includes(\"invalid\") || valA == undefined) {\n            return 1;\n          }\n          if (mntB.inspect().includes(\"invalid\") || valB == undefined) {\n            return -1;\n          }\n          const rtn = moment(valB).isAfter(valA) ? -1 : 1;\n          return rtn;\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const tableSortDescHelper = (newTableData, column) => {\n    switch (column.dataType) {\n      case \"currency\":\n      case \"percent\":\n      case \"number\":\n        newTableData.sort((a, b) => {\n          let valA = a.data[column.dataProperty];\n          let valB = b.data[column.dataProperty];\n          if (valA == undefined) {\n            return 1;\n          }\n          if (valB == undefined) {\n            return -1;\n          }\n          return valB - valA;\n        });\n        break;\n      case \"string\":\n        newTableData.sort((a, b) => {\n          let valA = a.data[column.dataProperty];\n          let valB = b.data[column.dataProperty];\n          if (valA == undefined || valA == \"\") {\n            return 1;\n          }\n          if (valB == undefined || valB == \"\") {\n            return -1;\n          }\n          return valB.localeCompare(valA);\n        });\n        break;\n      case \"date\":\n        newTableData.sort((a, b) => {\n          let valA = a.data[column.dataProperty];\n          let valB = b.data[column.dataProperty];\n          let mntA = moment(valA);\n          let mntB = moment(valB);\n          if (mntA.inspect().includes(\"invalid\") || valA == undefined) {\n            return 1;\n          }\n          if (mntB.inspect().includes(\"invalid\") || valB == undefined) {\n            return -1;\n          }\n          const rtn = moment(valA).isAfter(valB) ? -1 : 1;\n          return rtn;\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const tableSortHandler = (tableEvent) => {\n    if (!tableConfig) return;\n    const column = tableConfig.columns.find(\n      (col) => col.dataProperty === tableEvent.data.dataProperty\n    );\n    if (!column) return;\n    const newTableData = _.cloneDeep(tableData);\n    const newTableConfig = _.cloneDeep(tableConfig);\n    if (\n      !tableEvent.data.sortDirection ||\n      tableEvent.data.sortDirection === \"desc\"\n    ) {\n      tableSortAscHelper(newTableData, column);\n      newTableConfig.columns.forEach((col) => {\n        col.sortDirection =\n          col.dataProperty === tableEvent.data.dataProperty ? \"asc\" : null;\n      });\n    } else {\n      tableSortDescHelper(newTableData, column);\n      newTableConfig.columns.forEach((col) => {\n        col.sortDirection =\n          col.dataProperty === tableEvent.data.dataProperty ? \"desc\" : null;\n      });\n    }\n    setCurrentTableSort(tableEvent.data);\n    setTableData(newTableData);\n    setTableConfig(newTableConfig);\n  };\n\n  const tableEventHandler = (tableEvent) => {\n    switch (tableEvent.type) {\n      case \"dataSlice\":\n        tableSliceHandler(tableEvent);\n        break;\n      case \"columnSort\":\n        tableSortHandler(tableEvent);\n      default:\n        break;\n    }\n  };\n\n  const processFilters = () => {\n    if (rawTableData == null || tableConfig == null) {\n      return;\n    }\n\n    for (let filter of filters) {\n      // if commited range and range value are not equal this means we are in an intermediate state so no need to update filters\n      if (\n        filter.type === \"range\" &&\n        filter.commitedRange &&\n        filter.commitedRange.toString() !==\n          getRawFromFilterMarks(filter, filter.rangeValue).toString()\n      ) {\n        return;\n      }\n    }\n\n    const tableDataClone = _.cloneDeep(rawTableData);\n    const tableConfigClone = _.cloneDeep(tableConfig);\n\n    if (!filters.length) {\n      // Reset to raw table data when all filters have been removed\n      tableConfigClone.numRows = tableDataClone.length;\n      setTableConfig(tableConfigClone);\n      setTableData(tableDataClone);\n      return;\n    }\n\n    const filteredTableData = [];\n    var atLeastOneChange = false;\n    for (let row of tableDataClone) {\n      let passFilter = true;\n      for (let filter of filters) {\n        // apply each filter using AND logic\n        const value = row.data[filter.column.dataProperty];\n        if (filter.column.dataType === \"date\") {\n          if (filter.type === \"range\") {\n            const date = moment(value);\n            let maxValue;\n            let minValue;\n            if (\n              filter.commitedRange[0].inspect().includes(\"invalid\") ||\n              filter.commitedRange[1].isAfter(filter.commitedRange[0])\n            ) {\n              maxValue = filter.commitedRange[1];\n              minValue = filter.commitedRange[0];\n            } else {\n              maxValue = filter.commitedRange[0];\n              minValue = filter.commitedRange[1];\n            }\n            if (date.inspect().includes(\"invalid\")) {\n              if (minValue.inspect().includes(\"invalid\")) {\n                // inside\n                passFilter = filter.showSelected ? true : false;\n              } else {\n                // outside\n                passFilter = filter.showSelected ? false : true;\n              }\n            } else if (date.isBefore(minValue) || date.isAfter(maxValue)) {\n              // outside\n              passFilter = filter.showSelected ? false : true;\n            } else {\n              // inside\n              passFilter = filter.showSelected ? true : false;\n            }\n          } else if (filter.type === \"value\") {\n            // an empty value filter will be ignored\n            if (filter.selected.length) {\n              if (filter.selected.includes(value)) {\n                // inside\n                passFilter = filter.showSelected ? true : false;\n              } else {\n                // outside\n                passFilter = filter.showSelected ? false : true;\n              }\n            }\n          }\n        } else if (\n          [\"currency\", \"number\", \"percent\"].includes(filter.column.dataType)\n        ) {\n          if (filter.type === \"range\") {\n            const minValue = Math.min(...filter.commitedRange);\n            const maxValue = Math.max(...filter.commitedRange);\n            if (value < minValue || value > maxValue) {\n              // outside\n              passFilter = filter.showSelected ? false : true;\n            } else {\n              // inside\n              passFilter = filter.showSelected ? true : false;\n            }\n          } else if (filter.type === \"value\") {\n            // an empty value filter will be ignored\n            if (filter.selected.length) {\n              if (filter.selected.includes(value)) {\n                // inside\n                passFilter = filter.showSelected ? true : false;\n              } else {\n                // outside\n                passFilter = filter.showSelected ? false : true;\n              }\n            }\n          }\n        } else if (filter.column.dataType === \"string\") {\n          // an empty string filter will be ignored\n          if (filter.selected.length) {\n            if (filter.selected.includes(value)) {\n              // inside\n              passFilter = filter.showSelected ? true : false;\n            } else {\n              // outside\n              passFilter = filter.showSelected ? false : true;\n            }\n          }\n        }\n        if (!passFilter) {\n          break;\n        }\n      }\n      if (passFilter) {\n        // all filters have been passed, add row to output\n        filteredTableData.push(row);\n      } else {\n        atLeastOneChange = true;\n      }\n    }\n\n    if (currentTableSort) {\n      const column = tableConfigClone.columns.find(\n        (col) => col.dataProperty === currentTableSort.dataProperty\n      );\n      if (column) {\n        if (\n          !currentTableSort.sortDirection ||\n          currentTableSort.sortDirection === \"desc\"\n        ) {\n          tableSortAscHelper(filteredTableData, column);\n          tableConfigClone.columns.forEach((col) => {\n            col.sortDirection =\n              col.dataProperty === currentTableSort.dataProperty ? \"asc\" : null;\n          });\n        } else {\n          tableSortDescHelper(filteredTableData, column);\n          tableConfigClone.columns.forEach((col) => {\n            col.sortDirection =\n              col.dataProperty === currentTableSort.dataProperty\n                ? \"desc\"\n                : null;\n          });\n        }\n      }\n    }\n    tableConfigClone.numRows = filteredTableData.length;\n    setTableData(filteredTableData);\n    setTableConfig(tableConfigClone);\n    if (atLeastOneChange) {\n      setTableSlice((state) => ({\n        ...state,\n        lowerRowIdx: null,\n        upperRowIdx: null,\n      }));\n    }\n  };\n\n  const getRawFromFilterMarks = (filter, rangeValue) => {\n    console.log(\"filter>>\",filter)\n    \n    const valA = rangeValue[0];\n    const valB = rangeValue[1];\n    return [valA, valB];\n  };\n\n  const getFilterMarksFromRaw = (filter) => {\n    const getVal = (val) => {\n      if (filter.column.dataType === \"date\") {\n        return val.format(\"YYYY-MM-DD\");\n      }\n      return val;\n    };\n    const valA = filter.marks.find(\n      (mark) => getVal(mark.rawValue) === getVal(filter.commitedRange[0])\n    ).value;\n    const valB = filter.marks.find(\n      (mark) => getVal(mark.rawValue) === getVal(filter.commitedRange[1])\n    ).value;\n    return [valA, valB];\n  };\n\n  const handleFilterRangeCommitted = (filterId, rangeValue) => {\n    const filterIndex = filters.findIndex((f) => f.id === filterId);\n    if (filterIndex === -1) return;\n    const updatedFilter = _.cloneDeep(filters[filterIndex]);\n    updatedFilter.rangeValue = rangeValue;\n    updatedFilter.commitedRange = getRawFromFilterMarks(\n      updatedFilter,\n      rangeValue\n    );\n    setFilters((state) => {\n      const newState = _.cloneDeep(state);\n      newState.splice(filterIndex, 1, updatedFilter);\n      return newState;\n    });\n  };\n\n  const handleFilterRangeChange = (filterId, rangeValue) => {\n    const filterIndex = filters.findIndex((f) => f.id === filterId);\n    if (filterIndex === -1) return;\n    const updatedFilter = _.cloneDeep(filters[filterIndex]);\n    updatedFilter.rangeValue = rangeValue;\n    setFilters((state) => {\n      const newState = _.cloneDeep(state);\n      newState.splice(filterIndex, 1, updatedFilter);\n      return newState;\n    });\n  };\n\n  const handleFilterValueChange = (filterId, values) => {\n    const filterIndex = filters.findIndex((f) => f.id === filterId);\n    if (filterIndex === -1) return;\n    const updatedFilter = _.cloneDeep(filters[filterIndex]);\n    updatedFilter.selected = values;\n    setFilters((state) => {\n      const newState = _.cloneDeep(state);\n      newState.splice(filterIndex, 1, updatedFilter);\n      return newState;\n    });\n  };\n\n  const handleFilterHideSelectChange = (filterId) => {\n    const filterIndex = filters.findIndex((f) => f.id === filterId);\n    if (filterIndex === -1) return;\n    const updatedFilter = _.cloneDeep(filters[filterIndex]);\n    updatedFilter.showSelected = !updatedFilter.showSelected;\n    setFilters((state) => {\n      const newState = _.cloneDeep(state);\n      newState.splice(filterIndex, 1, updatedFilter);\n      return newState;\n    });\n  };\n\n  const handleFilterRangeLimitClicked = (filterId, type) => {\n    const filterIndex = filters.findIndex((f) => f.id === filterId);\n    if (filterIndex === -1) return;\n    const updatedFilter = _.cloneDeep(filters[filterIndex]);\n    if (type === \"max\") {\n      updatedFilter.maxOpen = !updatedFilter.maxOpen;\n    } else {\n      updatedFilter.minOpen = !updatedFilter.minOpen;\n    }\n    setFilters((state) => {\n      const newState = _.cloneDeep(state);\n      newState.splice(filterIndex, 1, updatedFilter);\n      return newState;\n    });\n  };\n\n  const generateRangeFilterMarks = (dataType, columnData) => {\n    let marks = [];\n    if (dataType === \"percent\") {\n      console.log(\"1\")\n      columnData = Array.from(new Set(columnData));\n      const max = Math.max(100, ...columnData);\n      let val = 0;\n      while (val <= max) {\n        marks.push({\n          value: val / 0.5,\n          label: null,\n          rawValue: val,\n        });\n        val += 0.5;\n      }\n      if (max % 0.5 !== 0) {\n        marks.push({\n          value: val / 0.5,\n          label: null,\n          rawValue: val,\n        });\n      }\n    } else if (dataType === \"currency\") {\n      const max = Math.max(...columnData);\n      if (max > 100e6) {\n        // Greater than 100M\n        for (let i = 0; i < 4; i++) {\n          marks.push({ value: i, label: null, rawValue: 10000000 * i });\n        }\n        for (let i = 1; i < 5; i++) {\n          marks.push({ value: i + 3, label: null, rawValue: 10000000 * i });\n        }\n        for (let i = 1; i <= 5; i++) {\n          marks.push({ value: i + 7, label: null, rawValue: 10000000 * i });\n        }\n        for (let i = 1; i <= Math.ceil(max / 100e6); i++) {\n          marks.push({ value: i + 12, label: null, rawValue: 10000000 * i });\n        }\n      } else if (max > 1e6) {\n        // Greater than 1M (max 104 ticks)\n        for (let i = 0; i < 4; i++) {\n          marks.push({ value: i, label: null, rawValue: 250e3 * i });\n        }\n        for (let i = 1; i <= Math.ceil(max / 1e6); i++) {\n          marks.push({ value: i + 3, label: null, rawValue: 1e6 * i });\n        }\n      } else {\n        // Less than 1M (max 101 ticks)\n        for (let i = 0; i <= Math.ceil(max / 10e3); i++) {\n          marks.push({ value: i, label: null, rawValue: 10e3 * i });\n        }\n      }\n    } else {\n      console.log(\"3\")\n      marks = Array.from(new Set(columnData)).map((value, idx) => {\n        return { value: idx, label: null, rawValue: value };\n      });\n    }\n    console.log(\"marks>\",marks)\n    return marks;\n  };\n\n  const filterAddedHelper = (column, type, initialValue, showSelected) => {\n    let filter = null;\n    showSelected = showSelected == undefined ? true : showSelected;\n    if ([\"currency\", \"number\", \"percent\"].includes(column.dataType)) {\n      if (type === \"range\") {\n        filter = {\n          column: column,\n          type: \"range\",\n          max: null,\n          min: null,\n          id: uuidv4(),\n          rangeValue: null,\n          commitedRange: null,\n          marks: [],\n          showSelected,\n          minOpen: false,\n          maxOpen: false,\n        };\n        let columnData = [];\n        rawTableData.forEach((row) => {\n          const data = row.data[column.dataProperty];\n          if (!(data == null)) columnData.push(data);\n        });\n        columnData.sort((a, b) => a - b);\n        filter.marks = generateRangeFilterMarks(column.dataType, columnData);\n        filter.max = columnData[columnData.length - 1];\n        filter.min = 0;\n        filter.commitedRange = initialValue || [\n          columnData[0],\n          columnData[columnData.length - 1],\n        ];\n        filter.rangeValue = initialValue\n          ? getFilterMarksFromRaw(filter)\n          : [filter.min, filter.max];\n      } else if (type === \"value\") {\n        filter = {\n          column: column,\n          type: \"value\",\n          id: uuidv4(),\n          options: null,\n          selected: [],\n          showSelected,\n        };\n        const columnData = [];\n        rawTableData.forEach((row) => {\n          const data = row.data[column.dataProperty];\n          if (!(data == null)) columnData.push(data);\n        });\n        const optionsSet = new Set(columnData);\n        filter.options = Array.from(optionsSet);\n        filter.selected = initialValue || [];\n      }\n    } else if (column.dataType === \"string\") {\n      filter = {\n        column: column,\n        type: \"value\",\n        id: uuidv4(),\n        options: null,\n        selected: [],\n        showSelected,\n      };\n      const columnData = [];\n      rawTableData.forEach((row) => {\n        const data = row.data[column.dataProperty];\n        if (!(data == null)) columnData.push(data);\n      });\n      const optionsSet = new Set(columnData);\n      filter.options = Array.from(optionsSet);\n      filter.selected = initialValue || [];\n    } else if (column.dataType === \"date\") {\n      if (type === \"range\") {\n        filter = {\n          column: column,\n          type: \"range\",\n          max: null,\n          min: null,\n          id: uuidv4(),\n          rangeValue: null,\n          commitedRange: null,\n          marks: null,\n          showSelected,\n          minOpen: false,\n          maxOpen: false,\n        };\n        const columnData = Array.from(\n          new Set(rawTableData.map((row) => row.data[column.dataProperty]))\n        );\n        const columnDataMnt = columnData\n          .map((row) => moment(row))\n          .sort((valA, valB) => {\n            if (valA == undefined) {\n              return -1;\n            }\n            if (valB == undefined) {\n              return 1;\n            }\n            let mntA = moment(valA);\n            let mntB = moment(valB);\n            if (mntA.inspect().includes(\"invalid\")) {\n              return -1;\n            }\n            if (mntB.inspect().includes(\"invalid\")) {\n              return 1;\n            }\n            const rtn = moment(valB).isAfter(valA) ? -1 : 1;\n            return rtn;\n          });\n        filter.marks = columnDataMnt.map((value, idx) => {\n          return { value: idx, label: null, rawValue: value };\n        });\n        filter.max = filter.marks.length - 1;\n        filter.min = 0;\n        filter.commitedRange = initialValue || [\n          columnDataMnt[0],\n          columnDataMnt[columnDataMnt.length - 1],\n        ];\n        filter.rangeValue = initialValue\n          ? getFilterMarksFromRaw(filter)\n          : [filter.min, filter.max];\n      } else if (type === \"value\") {\n        filter = {\n          column: column,\n          type: \"value\",\n          id: uuidv4(),\n          options: null,\n          selected: [],\n          showSelected,\n        };\n        const columnData = rawTableData.map(\n          (row) => row.data[column.dataProperty]\n        );\n        const optionsSet = new Set(columnData);\n        filter.options = Array.from(optionsSet);\n        filter.selected = initialValue || [];\n      }\n    }\n    return filter;\n  };\n\n  const handleFilterAdded = (column, type, initialValue) => {\n    const filter = filterAddedHelper(column, type, initialValue);\n    setFilters((state) => {\n      const newState = _.cloneDeep(state);\n      return [...newState, filter];\n    });\n  };\n\n  const saveFiltersHelper = async (displayName) => {\n    if (!filters.length) return;\n    const filterDefs = filters.map((filter) => {\n      const { dataProperty, rawType } = filter.column;\n      const filterDef = {\n        column: { dataProperty, rawType },\n        id: filter.id,\n        type: filter.type,\n        showSelected: filter.showSelected,\n      };\n      if (filter.type === \"range\") {\n        filterDef.value = filter.commitedRange;\n      } else if (filter.type === \"value\") {\n        filterDef.value = filter.selected;\n      }\n      return filterDef;\n    });\n    const token = await getAccessTokenSilently();\n    await addSavedFilter(token, filterDefs, displayName);\n    getSavedFiltersHelper(token);\n  };\n\n  const getSavedFiltersHelper = async (token) => {\n    token = token ? token : await getAccessTokenSilently();\n    const filters = await getSavedFilters(token);\n    if (filters?.rows) {\n      setSavedFilters(filters.rows);\n    }\n  };\n\n  const deleteSavedFilterHelper = async (filtersData) => {\n    if (!filtersData?.uuid) return;\n    const token = await getAccessTokenSilently();\n    await deleteSavedFilter(token, filtersData.uuid);\n    getSavedFiltersHelper(token);\n  };\n\n  const handleColumnToggle = (columnId) => {\n    const tableConfigClone = _.cloneDeep(tableConfig);\n    const column = tableConfigClone.columns.find((col) => col.id === columnId);\n    if (column) {\n      column.hidden = !column.hidden;\n      setTableConfig(tableConfigClone);\n    }\n  };\n\n  const handleColumnToggleBatch = (columnIds) => {\n    if (!columnIds) return;\n    const tableConfigClone = _.cloneDeep(tableConfig);\n    for (let id of columnIds) {\n      const column = tableConfigClone.columns.find((col) => col.id === id);\n      if (column) {\n        column.hidden = !column.hidden;\n      }\n    }\n    setTableConfig(tableConfigClone);\n  };\n\n  const handleDeleteFilter = (filterId) => {\n    setFilters(filters.filter((filter) => filter.id !== filterId));\n  };\n\n  const applySavedFilters = (filtersData) => {\n    if (!filtersData?.filterJSON) return;\n    const filterDefs = JSON.parse(filtersData.filterJSON);\n    const columnsToToggle = [];\n    const filtersToAdd = [];\n    filterDefs.forEach((filter) => {\n      const column = tableConfig.columns.find(\n        (col) => col.dataProperty === filter.column.dataProperty\n      );\n      if (!column) return;\n      if (column.hidden) {\n        columnsToToggle.push(column.id);\n      }\n      if (column.dataType === \"date\" && filter.type === \"range\") {\n        filter.value = [moment(filter.value[0]), moment(filter.value[1])];\n      }\n\n      filtersToAdd.push(\n        filterAddedHelper(\n          column,\n          filter.type,\n          filter.value,\n          filter.showSelected\n        )\n      );\n    });\n    handleColumnToggleBatch(columnsToToggle);\n    setFilters((state) => {\n      return filtersToAdd;\n    });\n    setDrawerToggle(false);\n  };\n\n  return (\n    <div className={styles.outerContainer}>\n      <Drawer\n        className={styles.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={drawerToggle}\n        classes={{\n          paper: styles.drawerPaper,\n        }}\n      >\n        <Paper\n          elevation={0}\n          className={styles.drawerHandle}\n          onClick={() => setDrawerToggle((state) => !state)}\n        >\n          <IconButton\n            className={styles.handleIcon}\n            classes={{\n              root: styles.handleIconRoot,\n            }}\n          >\n            {drawerToggle ? <KeyboardArrowLeftIcon /> : <MenuIcon />}\n          </IconButton>\n        </Paper>\n        <div className={styles.drawerContainer}>\n          <List>\n            <ListItem key={\"fav-filters\"}>\n              <ListItemIcon>\n                <FilterListIcon />\n              </ListItemIcon>\n              <ListItemText primary={\"Filters\"} />\n            </ListItem>\n            {savedFilters.map((filterData) => (\n              <ListItem\n                onClick={() => applySavedFilters(filterData)}\n                button\n                key={`filter-${filterData.uuid}`}\n              >\n                <ListItemText primary={filterData.displayName} />\n                <ListItemSecondaryAction\n                  onClick={() => deleteSavedFilterHelper(filterData)}\n                >\n                  <IconButton edge=\"end\" aria-label=\"delete\">\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n          <Divider />\n        </div>\n      </Drawer>\n      <div className={styles.mainContainer}>\n        <div className={styles.filterContainer}>\n          <DataTableFilters\n            handleFilterRangeLimitClicked={handleFilterRangeLimitClicked}\n            handleFilterHideSelectChange={handleFilterHideSelectChange}\n            saveFilters={saveFiltersHelper}\n            handleDeleteFilter={handleDeleteFilter}\n            handleColumnToggle={handleColumnToggle}\n            handleFilterRangeCommitted={handleFilterRangeCommitted}\n            columns={tableConfig?.columns}\n            filters={filters}\n            handleFilterAdded={handleFilterAdded}\n            handleFilterRangeChange={handleFilterRangeChange}\n            handleFilterValueChange={handleFilterValueChange}\n          />\n        </div>\n        <div className={styles.tableContainer}>\n          <DataTable\n            tableRows={tableSlice}\n            config={tableConfig}\n            tableAction={tableEventHandler}\n          ></DataTable>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    drawer: {\n      flexShrink: 0,\n    },\n    drawerContainer: {\n      overflow: \"auto\",\n      width: \"300px\",\n    },\n    drawerPaper: {\n      marginTop: \"95px\",\n      visibility: \"visible !important\",\n      overflowY: \"visible\",\n      height: \"calc(100% - 95px)\",\n    },\n    drawerHandle: {\n      marginRight: \"-48px\",\n      position: \"absolute\",\n      borderRadius: \"0% 50% 50% 0%\",\n      borderStyle: \"solid\",\n      borderWidth: \"1px\",\n      borderLeft: \"none\",\n      borderColor: \"rgba(0, 0, 0, 0.12)\",\n      top: \"15px\",\n      right: \"-2px\",\n      width: \"48px\",\n    },\n    handleIcon: {\n      height: \"50px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    handleIconRoot: {\n      borderRadius: \"0% 50% 50% 0%\",\n    },\n    mainContainer: {\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n      },\n      [theme.breakpoints.down(\"lg\")]: {\n        width: \"900px\",\n      },\n      [theme.breakpoints.up(\"lg\")]: {\n        width: \"1200px\",\n      },\n      [theme.breakpoints.up(\"xl\")]: {\n        width: \"1700px\",\n      },\n      marginTop: \"95px\",\n      padding: \"24px 0px\",\n    },\n    filterContainer: {\n      margin: \"0px 0px 24px 0px\",\n    },\n    tableContainer: {\n      flexGrow: 1,\n    },\n    dataGrid: {\n      backgroundColor: \"#fff\",\n    },\n  };\n});\n\nexport default DataTableComponent;\n","/Users/amaan/amaan/answer-frontend/src/components/DataTable.js",["101","102","103","104","105","106","107","108","109","110","111","112","113"],"/Users/amaan/amaan/answer-frontend/src/components/Dashboard.js",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129"],"/Users/amaan/amaan/answer-frontend/src/components/MarketCapLowFIlter.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":39,"column":10,"nodeType":"136","messageId":"137","endLine":39,"endColumn":28},{"ruleId":"134","severity":1,"message":"138","line":85,"column":9,"nodeType":"136","messageId":"137","endLine":85,"endColumn":29},{"ruleId":"134","severity":1,"message":"139","line":93,"column":9,"nodeType":"136","messageId":"137","endLine":93,"endColumn":30},{"ruleId":"140","severity":1,"message":"141","line":119,"column":5,"nodeType":"142","messageId":"143","endLine":164,"endColumn":6},{"ruleId":"144","severity":1,"message":"145","line":169,"column":30,"nodeType":"146","messageId":"147","endLine":169,"endColumn":32},{"ruleId":"134","severity":1,"message":"148","line":208,"column":9,"nodeType":"136","messageId":"137","endLine":208,"endColumn":25},{"ruleId":"149","severity":1,"message":"150","line":236,"column":20,"nodeType":"151","messageId":"152","endLine":236,"endColumn":22},{"ruleId":"130","replacedBy":"153"},{"ruleId":"132","replacedBy":"154"},{"ruleId":"134","severity":1,"message":"155","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":16},{"ruleId":"156","severity":1,"message":"157","line":19,"column":13,"nodeType":"158","endLine":19,"endColumn":57},{"ruleId":"130","replacedBy":"159"},{"ruleId":"132","replacedBy":"160"},{"ruleId":"130","replacedBy":"161"},{"ruleId":"132","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":100,"column":3,"nodeType":"165","messageId":"152","endLine":100,"endColumn":25},{"ruleId":"163","severity":1,"message":"166","line":150,"column":3,"nodeType":"165","messageId":"152","endLine":150,"endColumn":16},{"ruleId":"134","severity":1,"message":"167","line":223,"column":10,"nodeType":"136","messageId":"137","endLine":223,"endColumn":19},{"ruleId":"168","severity":1,"message":"169","line":228,"column":13,"nodeType":"146","endLine":241,"endColumn":4},{"ruleId":"168","severity":1,"message":"170","line":241,"column":6,"nodeType":"171","endLine":241,"endColumn":8,"suggestions":"172"},{"ruleId":"168","severity":1,"message":"173","line":245,"column":6,"nodeType":"171","endLine":245,"endColumn":31,"suggestions":"174"},{"ruleId":"168","severity":1,"message":"175","line":245,"column":7,"nodeType":"176","endLine":245,"endColumn":30},{"ruleId":"140","severity":1,"message":"141","line":307,"column":5,"nodeType":"142","messageId":"143","endLine":327,"endColumn":6},{"ruleId":"149","severity":1,"message":"150","line":447,"column":20,"nodeType":"151","messageId":"152","endLine":447,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":450,"column":20,"nodeType":"151","messageId":"152","endLine":450,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":460,"column":20,"nodeType":"151","messageId":"152","endLine":460,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":460,"column":41,"nodeType":"151","messageId":"152","endLine":460,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":463,"column":20,"nodeType":"151","messageId":"152","endLine":463,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":463,"column":41,"nodeType":"151","messageId":"152","endLine":463,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":475,"column":58,"nodeType":"151","messageId":"152","endLine":475,"endColumn":60},{"ruleId":"149","severity":1,"message":"150","line":478,"column":58,"nodeType":"151","messageId":"152","endLine":478,"endColumn":60},{"ruleId":"149","severity":1,"message":"150","line":498,"column":20,"nodeType":"151","messageId":"152","endLine":498,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":501,"column":20,"nodeType":"151","messageId":"152","endLine":501,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":511,"column":20,"nodeType":"151","messageId":"152","endLine":511,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":511,"column":41,"nodeType":"151","messageId":"152","endLine":511,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":514,"column":20,"nodeType":"151","messageId":"152","endLine":514,"endColumn":22},{"ruleId":"149","severity":1,"message":"150","line":514,"column":41,"nodeType":"151","messageId":"152","endLine":514,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":526,"column":58,"nodeType":"151","messageId":"152","endLine":526,"endColumn":60},{"ruleId":"149","severity":1,"message":"150","line":529,"column":58,"nodeType":"151","messageId":"152","endLine":529,"endColumn":60},{"ruleId":"177","severity":1,"message":"178","line":577,"column":7,"nodeType":"179","messageId":"180","endLine":578,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":901,"column":33,"nodeType":"151","messageId":"152","endLine":901,"endColumn":35},{"ruleId":"149","severity":1,"message":"150","line":989,"column":22,"nodeType":"151","messageId":"152","endLine":989,"endColumn":24},{"ruleId":"149","severity":1,"message":"150","line":992,"column":22,"nodeType":"151","messageId":"152","endLine":992,"endColumn":24},{"ruleId":"134","severity":1,"message":"181","line":39,"column":10,"nodeType":"136","messageId":"137","endLine":39,"endColumn":26},{"ruleId":"168","severity":1,"message":"182","line":88,"column":6,"nodeType":"171","endLine":88,"endColumn":20,"suggestions":"183"},{"ruleId":"168","severity":1,"message":"184","line":94,"column":6,"nodeType":"171","endLine":94,"endColumn":23,"suggestions":"185"},{"ruleId":"140","severity":1,"message":"141","line":109,"column":5,"nodeType":"142","messageId":"143","endLine":121,"endColumn":6},{"ruleId":"134","severity":1,"message":"186","line":127,"column":9,"nodeType":"136","messageId":"137","endLine":127,"endColumn":25},{"ruleId":"134","severity":1,"message":"187","line":153,"column":9,"nodeType":"136","messageId":"137","endLine":153,"endColumn":25},{"ruleId":"134","severity":1,"message":"188","line":197,"column":9,"nodeType":"136","messageId":"137","endLine":197,"endColumn":33},{"ruleId":"134","severity":1,"message":"189","line":201,"column":9,"nodeType":"136","messageId":"137","endLine":201,"endColumn":26},{"ruleId":"149","severity":1,"message":"150","line":202,"column":22,"nodeType":"151","messageId":"152","endLine":202,"endColumn":24},{"ruleId":"134","severity":1,"message":"190","line":203,"column":5,"nodeType":"136","messageId":"137","endLine":203,"endColumn":16},{"ruleId":"134","severity":1,"message":"191","line":294,"column":9,"nodeType":"136","messageId":"137","endLine":294,"endColumn":21},{"ruleId":"156","severity":1,"message":"157","line":375,"column":29,"nodeType":"158","endLine":375,"endColumn":78},{"ruleId":"156","severity":1,"message":"157","line":441,"column":35,"nodeType":"158","endLine":444,"endColumn":37},{"ruleId":"134","severity":1,"message":"192","line":3,"column":3,"nodeType":"136","messageId":"137","endLine":3,"endColumn":11},{"ruleId":"134","severity":1,"message":"193","line":5,"column":3,"nodeType":"136","messageId":"137","endLine":5,"endColumn":14},{"ruleId":"134","severity":1,"message":"194","line":6,"column":3,"nodeType":"136","messageId":"137","endLine":6,"endColumn":19},{"ruleId":"134","severity":1,"message":"195","line":7,"column":3,"nodeType":"136","messageId":"137","endLine":7,"endColumn":12},{"ruleId":"134","severity":1,"message":"196","line":8,"column":3,"nodeType":"136","messageId":"137","endLine":8,"endColumn":12},{"ruleId":"134","severity":1,"message":"197","line":9,"column":3,"nodeType":"136","messageId":"137","endLine":9,"endColumn":13},{"ruleId":"134","severity":1,"message":"198","line":10,"column":3,"nodeType":"136","messageId":"137","endLine":10,"endColumn":15},{"ruleId":"134","severity":1,"message":"199","line":12,"column":3,"nodeType":"136","messageId":"137","endLine":12,"endColumn":11},{"ruleId":"134","severity":1,"message":"200","line":13,"column":3,"nodeType":"136","messageId":"137","endLine":13,"endColumn":9},{"ruleId":"134","severity":1,"message":"201","line":15,"column":3,"nodeType":"136","messageId":"137","endLine":15,"endColumn":12},{"ruleId":"134","severity":1,"message":"202","line":16,"column":3,"nodeType":"136","messageId":"137","endLine":16,"endColumn":13},{"ruleId":"134","severity":1,"message":"203","line":22,"column":8,"nodeType":"136","messageId":"137","endLine":22,"endColumn":26},{"ruleId":"134","severity":1,"message":"204","line":24,"column":10,"nodeType":"136","messageId":"137","endLine":24,"endColumn":19},{"ruleId":"134","severity":1,"message":"205","line":24,"column":21,"nodeType":"136","messageId":"137","endLine":24,"endColumn":25},{"ruleId":"168","severity":1,"message":"169","line":34,"column":13,"nodeType":"146","endLine":70,"endColumn":4},{"ruleId":"168","severity":1,"message":"206","line":70,"column":6,"nodeType":"171","endLine":70,"endColumn":8,"suggestions":"207"},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"no-unused-vars","'columnMenuAnchorEl' is assigned a value but never used.","Identifier","unusedVar","'handleColumnMenuOpen' is assigned a value but never used.","'handleColumnMenuClose' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'valueLabelFormat' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["208"],["209"],"'MenuIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["208"],["209"],["208"],["209"],"no-dupe-keys","Duplicate key 'CASH_SETTLEMENT_AMOUND'.","ObjectExpression","Duplicate key 'FEDERAL_JUDGE'.","'tableMeta' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'createTableConfig', 'getAccessTokenSilently', and 'getSavedFiltersHelper'. Either include them or remove the dependency array.","ArrayExpression",["210"],"React Hook useEffect has a missing dependency: 'processFilters'. Either include it or remove the dependency array.",["211"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'windowDimentions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentTableRows', 'getTableSlice', and 'isDataLoading'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has missing dependencies: 'currentConfig', 'currentTableRows', and 'isDataLoading'. Either include them or remove the dependency array.",["213"],"'cellInputOptions' is assigned a value but never used.","'handleCellChange' is assigned a value but never used.","'handleColumnOptionChange' is assigned a value but never used.","'updateCurrentPage' is assigned a value but never used.","'currentPage' is assigned a value but never used.","'getRowHeight' is assigned a value but never used.","'Checkbox' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'FormLabel' is defined but never used.","'InputLabel' is defined but never used.","'ListItemText' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'TextField' is defined but never used.","'withStyles' is defined but never used.","'MarketCapLowFilter' is defined but never used.","'AutoSizer' is defined but never used.","'List' is defined but never used.","React Hook useEffect has a missing dependency: 'getAccessTokenSilently'. Either include it or remove the dependency array.",["214"],"no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},"Update the dependencies array to be: [createTableConfig, getAccessTokenSilently, getSavedFiltersHelper]",{"range":"225","text":"226"},"Update the dependencies array to be: [processFilters]",{"range":"227","text":"228"},"Update the dependencies array to be: [currentTableRows, getTableSlice, isDataLoading, props.config]",{"range":"229","text":"230"},"Update the dependencies array to be: [currentConfig, currentTableRows, isDataLoading, props.tableRows]",{"range":"231","text":"232"},"Update the dependencies array to be: [getAccessTokenSilently]",{"range":"233","text":"234"},[7805,7807],"[createTableConfig, getAccessTokenSilently, getSavedFiltersHelper]",[7858,7883],"[processFilters]",[2463,2477],"[currentTableRows, getTableSlice, isDataLoading, props.config]",[2605,2622],"[currentConfig, currentTableRows, isDataLoading, props.tableRows]",[1983,1985],"[getAccessTokenSilently]"]